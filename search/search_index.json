{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"playwright-localstorage","text":"<p>Extension for the Playwright package  that allows access to the Web Storage API.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install playwright-localstorage\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#synchronous","title":"Synchronous","text":"<pre><code>from playwright.sync_api import Playwright\nfrom playwright.sync_api import sync_playwright\n\nfrom playwright_localstorage import LocalStorageAccessor\n\n\ndef run(p: Playwright):\n    chromium = p.chromium\n    browser = chromium.launch(headless=False)\n\n    page = browser.new_page()\n    page.goto(\"http://example.com\")\n\n    accessor = LocalStorageAccessor(page)\n\n    accessor.set(\"token\", \"secret-token\")  # Set value\n    token = accessor.get(\"token\")          # Get value\n\n    print(token)                           # &gt;&gt; \"secret-token\"\n\n    exists = accessor.has(\"token\")         # Check key for existence\n\n    print(exists)                          # &gt;&gt; True\n\n    keys = accessor.keys()                 # Get all keys\n\n    print(keys)                            # &gt;&gt; [\"token\"]\n\n    items = accessor.items()               # Get all items\n\n    print(items)                           # &gt;&gt; {\"token\": \"secret-token\"}\n\n    accessor.remove(\"token\")               # Remove key\n\n    exists = accessor.has(\"token\")\n\n    print(exists)                          # &gt;&gt; False\n\n    browser.close()\n\n\nwith sync_playwright() as playwright:\n    run(playwright)\n</code></pre>"},{"location":"#asynchronous","title":"Asynchronous","text":"<p>The package supports asynchronous implementation.</p>"},{"location":"license/","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2024 Dmitry Vasiliev\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"guide/install/","title":"Installation","text":"<p>Get started with playwright-localstorage.</p>"},{"location":"guide/install/#setup","title":"Setup","text":""},{"location":"guide/install/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you have <code>`python</code> and <code>pip</code> properly installed in your system. <pre><code>python --version\npip --version\n</code></pre></p> </li> <li> <p>Create a new directory and move into it to follow along with this tutorial. <pre><code>mkdir learn-playwright-localstorage &amp;&amp; cd learn-playwright-localstorage\n</code></pre></p> </li> </ul>"},{"location":"guide/install/#installation","title":"Installation","text":"<ul> <li> <p>Create a virtual environment and activate it. <pre><code>python -m venv .venv &amp;&amp; source .venv/bin/activate\n</code></pre></p> </li> <li> <p>Install <code>playwright-localstorage</code> using <code>pip</code>: <pre><code>pip install --upgrade playwright-localstorage\n</code></pre></p> </li> </ul>"},{"location":"references/playwright_localstorage.async_/","title":"Async","text":""},{"location":"references/playwright_localstorage.async_/#module-playwright_localstorageasync_","title":"module <code>playwright_localstorage.async_</code>","text":""},{"location":"references/playwright_localstorage.async_/#class-asynclocalstorageaccessor","title":"class <code>AsyncLocalStorageAccessor</code>","text":"<p>Provides access to local storage and allows you to perform various data operations. </p> <p></p>"},{"location":"references/playwright_localstorage.async_/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__(page: Page) \u2192 None\n</code></pre>"},{"location":"references/playwright_localstorage.async_/#method-clear","title":"method <code>clear</code>","text":"<pre><code>clear() \u2192 None\n</code></pre> <p>Clears all keys stored. </p> <p>Returns:   None </p> <p></p>"},{"location":"references/playwright_localstorage.async_/#method-get","title":"method <code>get</code>","text":"<pre><code>get(key: str) \u2192 Optional[Any]\n</code></pre> <p>Returns key's value, or None if the key does not exist. </p> <p>Args:</p> <ul> <li><code>key</code>:  A string containing the name of the key you want to retrieve the value of. </li> </ul> <p>Returns:</p> <ul> <li><code>any</code>:  The value of the key if it exists, or None if the key does not exist. </li> </ul> <p></p>"},{"location":"references/playwright_localstorage.async_/#method-has","title":"method <code>has</code>","text":"<pre><code>has(key: str) \u2192 bool\n</code></pre> <p>Returns True if the key exists, False otherwise. </p> <p>Args:</p> <ul> <li><code>key</code>:  A string containing the name of the key you want to check existence. </li> </ul> <p>Returns:</p> <ul> <li><code>bool</code>:  True if the key exists, False otherwise. </li> </ul> <p></p>"},{"location":"references/playwright_localstorage.async_/#method-items","title":"method <code>items</code>","text":"<pre><code>items() \u2192 dict[str, Any]\n</code></pre> <p>Returns dictionary with all data items stored. </p> <p>Returns:</p> <ul> <li><code>dict[str, typing.Any]</code>:  A dictionary with all data items stored. </li> </ul> <p></p>"},{"location":"references/playwright_localstorage.async_/#method-keys","title":"method <code>keys</code>","text":"<pre><code>keys() \u2192 Sequence[str]\n</code></pre> <p>Returns all stored keys. </p> <p>Returns:</p> <ul> <li><code>typing.Sequence[str]</code>:  A list of all stored keys. </li> </ul> <p></p>"},{"location":"references/playwright_localstorage.async_/#method-len","title":"method <code>len</code>","text":"<pre><code>len() \u2192 int\n</code></pre> <p>Returns an integer representing the number of data items stored. </p> <p>Returns:</p> <ul> <li><code>int</code>:  The number of data items stored. </li> </ul> <p></p>"},{"location":"references/playwright_localstorage.async_/#method-remove","title":"method <code>remove</code>","text":"<pre><code>remove(key: str) \u2192 None\n</code></pre> <p>Remove the key from the storage if it exists. </p> <p>Args:</p> <ul> <li><code>key</code>:  A string containing the name of the key you want to remove. </li> </ul> <p>Returns:  None </p> <p></p>"},{"location":"references/playwright_localstorage.async_/#method-set","title":"method <code>set</code>","text":"<pre><code>set(key: str, value: Optional[Any]) \u2192 None\n</code></pre> <p>Add the key or update that key's value if it already exists. </p> <p>Args:</p> <ul> <li><code>key</code>:  A string containing the name of the key you want to create/update. </li> <li><code>value</code>:  A string containing the value you want to give the key you are creating/updating. </li> </ul> <p>Returns:  None </p> <p></p>"},{"location":"references/playwright_localstorage.async_/#class-asyncsessionstorageaccessor","title":"class <code>AsyncSessionStorageAccessor</code>","text":"<p>Provides access to local storage and allows you to perform various data operations. </p> <p></p>"},{"location":"references/playwright_localstorage.async_/#method-__init___1","title":"method <code>__init__</code>","text":"<pre><code>__init__(page: Page) \u2192 None\n</code></pre>"},{"location":"references/playwright_localstorage.async_/#method-clear_1","title":"method <code>clear</code>","text":"<pre><code>clear() \u2192 None\n</code></pre> <p>Clears all keys stored. </p> <p>Returns:   None </p> <p></p>"},{"location":"references/playwright_localstorage.async_/#method-get_1","title":"method <code>get</code>","text":"<pre><code>get(key: str) \u2192 Optional[Any]\n</code></pre> <p>Returns key's value, or None if the key does not exist. </p> <p>Args:</p> <ul> <li><code>key</code>:  A string containing the name of the key you want to retrieve the value of. </li> </ul> <p>Returns:</p> <ul> <li><code>any</code>:  The value of the key if it exists, or None if the key does not exist. </li> </ul> <p></p>"},{"location":"references/playwright_localstorage.async_/#method-has_1","title":"method <code>has</code>","text":"<pre><code>has(key: str) \u2192 bool\n</code></pre> <p>Returns True if the key exists, False otherwise. </p> <p>Args:</p> <ul> <li><code>key</code>:  A string containing the name of the key you want to check existence. </li> </ul> <p>Returns:</p> <ul> <li><code>bool</code>:  True if the key exists, False otherwise. </li> </ul> <p></p>"},{"location":"references/playwright_localstorage.async_/#method-items_1","title":"method <code>items</code>","text":"<pre><code>items() \u2192 dict[str, Any]\n</code></pre> <p>Returns dictionary with all data items stored. </p> <p>Returns:</p> <ul> <li><code>dict[str, typing.Any]</code>:  A dictionary with all data items stored. </li> </ul> <p></p>"},{"location":"references/playwright_localstorage.async_/#method-keys_1","title":"method <code>keys</code>","text":"<pre><code>keys() \u2192 Sequence[str]\n</code></pre> <p>Returns all stored keys. </p> <p>Returns:</p> <ul> <li><code>typing.Sequence[str]</code>:  A list of all stored keys. </li> </ul> <p></p>"},{"location":"references/playwright_localstorage.async_/#method-len_1","title":"method <code>len</code>","text":"<pre><code>len() \u2192 int\n</code></pre> <p>Returns an integer representing the number of data items stored. </p> <p>Returns:</p> <ul> <li><code>int</code>:  The number of data items stored. </li> </ul> <p></p>"},{"location":"references/playwright_localstorage.async_/#method-remove_1","title":"method <code>remove</code>","text":"<pre><code>remove(key: str) \u2192 None\n</code></pre> <p>Remove the key from the storage if it exists. </p> <p>Args:</p> <ul> <li><code>key</code>:  A string containing the name of the key you want to remove. </li> </ul> <p>Returns:  None </p> <p></p>"},{"location":"references/playwright_localstorage.async_/#method-set_1","title":"method <code>set</code>","text":"<pre><code>set(key: str, value: Optional[Any]) \u2192 None\n</code></pre> <p>Add the key or update that key's value if it already exists. </p> <p>Args:</p> <ul> <li><code>key</code>:  A string containing the name of the key you want to create/update. </li> <li><code>value</code>:  A string containing the value you want to give the key you are creating/updating. </li> </ul> <p>Returns:  None </p> <p>This file was automatically generated via lazydocs.</p>"},{"location":"references/playwright_localstorage.base/","title":"Base","text":""},{"location":"references/playwright_localstorage.base/#module-playwright_localstoragebase","title":"module <code>playwright_localstorage.base</code>","text":""},{"location":"references/playwright_localstorage.base/#class-baselocalstorageaccessor","title":"class <code>BaseLocalStorageAccessor</code>","text":""},{"location":"references/playwright_localstorage.base/#class-basesessionstorageaccessor","title":"class <code>BaseSessionStorageAccessor</code>","text":"<p>This file was automatically generated via lazydocs.</p>"},{"location":"references/playwright_localstorage.sync_/","title":"Sync","text":""},{"location":"references/playwright_localstorage.sync_/#module-playwright_localstoragesync_","title":"module <code>playwright_localstorage.sync_</code>","text":""},{"location":"references/playwright_localstorage.sync_/#class-localstorageaccessor","title":"class <code>LocalStorageAccessor</code>","text":"<p>Provides access to local storage and allows you to perform various data operations. </p> <p></p>"},{"location":"references/playwright_localstorage.sync_/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__(page: Page) \u2192 None\n</code></pre>"},{"location":"references/playwright_localstorage.sync_/#method-clear","title":"method <code>clear</code>","text":"<pre><code>clear() \u2192 None\n</code></pre> <p>Clears all keys stored. </p> <p>Returns:   None </p> <p></p>"},{"location":"references/playwright_localstorage.sync_/#method-get","title":"method <code>get</code>","text":"<pre><code>get(key: str) \u2192 Optional[Any]\n</code></pre> <p>Returns key's value, or None if the key does not exist. </p> <p>Args:</p> <ul> <li><code>key</code>:  A string containing the name of the key you want to retrieve the value of. </li> </ul> <p>Returns:</p> <ul> <li><code>any</code>:  The value of the key if it exists, or None if the key does not exist. </li> </ul> <p></p>"},{"location":"references/playwright_localstorage.sync_/#method-has","title":"method <code>has</code>","text":"<pre><code>has(key: str) \u2192 bool\n</code></pre> <p>Returns True if the key exists, False otherwise. </p> <p>Args:</p> <ul> <li><code>key</code>:  A string containing the name of the key you want to check existence. </li> </ul> <p>Returns:</p> <ul> <li><code>bool</code>:  True if the key exists, False otherwise. </li> </ul> <p></p>"},{"location":"references/playwright_localstorage.sync_/#method-items","title":"method <code>items</code>","text":"<pre><code>items() \u2192 dict[str, Any]\n</code></pre> <p>Returns dictionary with all data items stored. </p> <p>Returns:</p> <ul> <li><code>dict[str, typing.Any]</code>:  A dictionary with all data items stored. </li> </ul> <p></p>"},{"location":"references/playwright_localstorage.sync_/#method-keys","title":"method <code>keys</code>","text":"<pre><code>keys() \u2192 Sequence[str]\n</code></pre> <p>Returns all stored keys. </p> <p>Returns:</p> <ul> <li><code>typing.Sequence[str]</code>:  A list of all stored keys. </li> </ul> <p></p>"},{"location":"references/playwright_localstorage.sync_/#method-len","title":"method <code>len</code>","text":"<pre><code>len() \u2192 int\n</code></pre> <p>Returns an integer representing the number of data items stored. </p> <p>Returns:</p> <ul> <li><code>int</code>:  The number of data items stored. </li> </ul> <p></p>"},{"location":"references/playwright_localstorage.sync_/#method-remove","title":"method <code>remove</code>","text":"<pre><code>remove(key: str) \u2192 None\n</code></pre> <p>Remove the key from the storage if it exists. </p> <p>Args:</p> <ul> <li><code>key</code>:  A string containing the name of the key you want to remove. </li> </ul> <p>Returns:  None </p> <p></p>"},{"location":"references/playwright_localstorage.sync_/#method-set","title":"method <code>set</code>","text":"<pre><code>set(key: str, value: Optional[Any]) \u2192 None\n</code></pre> <p>Add the key or update that key's value if it already exists. </p> <p>Args:</p> <ul> <li><code>key</code>:  A string containing the name of the key you want to create/update. </li> <li><code>value</code>:  A string containing the value you want to give the key you are creating/updating. </li> </ul> <p>Returns:  None </p> <p></p>"},{"location":"references/playwright_localstorage.sync_/#class-sessionstorageaccessor","title":"class <code>SessionStorageAccessor</code>","text":"<p>Provides access to session storage and allows you to perform various data operations. </p> <p></p>"},{"location":"references/playwright_localstorage.sync_/#method-__init___1","title":"method <code>__init__</code>","text":"<pre><code>__init__(page: Page) \u2192 None\n</code></pre>"},{"location":"references/playwright_localstorage.sync_/#method-clear_1","title":"method <code>clear</code>","text":"<pre><code>clear() \u2192 None\n</code></pre> <p>Clears all keys stored. </p> <p>Returns:   None </p> <p></p>"},{"location":"references/playwright_localstorage.sync_/#method-get_1","title":"method <code>get</code>","text":"<pre><code>get(key: str) \u2192 Optional[Any]\n</code></pre> <p>Returns key's value, or None if the key does not exist. </p> <p>Args:</p> <ul> <li><code>key</code>:  A string containing the name of the key you want to retrieve the value of. </li> </ul> <p>Returns:</p> <ul> <li><code>any</code>:  The value of the key if it exists, or None if the key does not exist. </li> </ul> <p></p>"},{"location":"references/playwright_localstorage.sync_/#method-has_1","title":"method <code>has</code>","text":"<pre><code>has(key: str) \u2192 bool\n</code></pre> <p>Returns True if the key exists, False otherwise. </p> <p>Args:</p> <ul> <li><code>key</code>:  A string containing the name of the key you want to check existence. </li> </ul> <p>Returns:</p> <ul> <li><code>bool</code>:  True if the key exists, False otherwise. </li> </ul> <p></p>"},{"location":"references/playwright_localstorage.sync_/#method-items_1","title":"method <code>items</code>","text":"<pre><code>items() \u2192 dict[str, Any]\n</code></pre> <p>Returns dictionary with all data items stored. </p> <p>Returns:</p> <ul> <li><code>dict[str, typing.Any]</code>:  A dictionary with all data items stored. </li> </ul> <p></p>"},{"location":"references/playwright_localstorage.sync_/#method-keys_1","title":"method <code>keys</code>","text":"<pre><code>keys() \u2192 Sequence[str]\n</code></pre> <p>Returns all stored keys. </p> <p>Returns:</p> <ul> <li><code>typing.Sequence[str]</code>:  A list of all stored keys. </li> </ul> <p></p>"},{"location":"references/playwright_localstorage.sync_/#method-len_1","title":"method <code>len</code>","text":"<pre><code>len() \u2192 int\n</code></pre> <p>Returns an integer representing the number of data items stored. </p> <p>Returns:</p> <ul> <li><code>int</code>:  The number of data items stored. </li> </ul> <p></p>"},{"location":"references/playwright_localstorage.sync_/#method-remove_1","title":"method <code>remove</code>","text":"<pre><code>remove(key: str) \u2192 None\n</code></pre> <p>Remove the key from the storage if it exists. </p> <p>Args:</p> <ul> <li><code>key</code>:  A string containing the name of the key you want to remove. </li> </ul> <p>Returns:  None </p> <p></p>"},{"location":"references/playwright_localstorage.sync_/#method-set_1","title":"method <code>set</code>","text":"<pre><code>set(key: str, value: Optional[Any]) \u2192 None\n</code></pre> <p>Add the key or update that key's value if it already exists. </p> <p>Args:</p> <ul> <li><code>key</code>:  A string containing the name of the key you want to create/update. </li> <li><code>value</code>:  A string containing the value you want to give the key you are creating/updating. </li> </ul> <p>Returns:  None </p> <p>This file was automatically generated via lazydocs.</p>"},{"location":"coverage/","title":"Coverage","text":""}]}